name: Terraform Deployment

on:
  push:
    branches:
      - main

env:
  LOCATION:        swedencentral
  RG_TERRAFORM:    terrabicep-terraform
  SA_NAME:         terrabicepstate
  CONTAINER_NAME:  tfstate
  SECRET_NAME:     sshPublicKey

jobs:
  plan_and_apply:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Azure login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          auth-type: service_principal

      - name: Delete old Resource Group (async)
        run: |
          if az group exists --name $RG_TERRAFORM | grep -q true; then
            az group delete \
              --name $RG_TERRAFORM \
              --yes \
              --no-wait
          fi

      - name: Wait for Resource Group deletion
        run: |
          if az group exists --name $RG_TERRAFORM | grep -q true; then
            az group wait --name $RG_TERRAFORM --deleted
          fi

      - name: Create Resource Group & Storage for Terraform state
        run: |
          # Create resource group
          az group create \
            --name $RG_TERRAFORM \
            --location $LOCATION

          # Create storage account
          az storage account create \
            --name $SA_NAME \
            --resource-group $RG_TERRAFORM \
            --sku Standard_LRS \
            --location $LOCATION

          # Get storage account key
          KEY=$(az storage account keys list \
            --resource-group $RG_TERRAFORM \
            --account-name $SA_NAME \
            --query "[0].value" -o tsv)

          # Create blob container
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $SA_NAME \
            --account-key $KEY

          # Export ARM_* for backend
          echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}"      >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}"      >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

          # Export TF_VAR_* for Terraform provider
          echo "TF_VAR_subscription_id=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_client_id=${{ secrets.ARM_CLIENT_ID }}"           >> $GITHUB_ENV
          echo "TF_VAR_client_secret=${{ secrets.ARM_CLIENT_SECRET }}"   >> $GITHUB_ENV
          echo "TF_VAR_tenant_id=${{ secrets.ARM_TENANT_ID }}"           >> $GITHUB_ENV
          echo "TF_VAR_location=$LOCATION"                               >> $GITHUB_ENV
          echo "TF_VAR_resource_group_name=$RG_TERRAFORM"                >> $GITHUB_ENV

          # Export TF_VAR for Key Vault
          echo "TF_VAR_kv_name=$SA_NAME"                                 >> $GITHUB_ENV
          echo "TF_VAR_kv_secret_name=$SECRET_NAME"                      >> $GITHUB_ENV

          # Export backend config vars
          echo "TF_BACKEND_RG=$RG_TERRAFORM"                             >> $GITHUB_ENV
          echo "TF_BACKEND_SA=$SA_NAME"                                 >> $GITHUB_ENV
          echo "TF_BACKEND_CONTAINER=$CONTAINER_NAME"                   >> $GITHUB_ENV
          echo "TF_BACKEND_KEY=terraform.tfstate"                       >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init & Apply
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=$TF_BACKEND_RG" \
            -backend-config="storage_account_name=$TF_BACKEND_SA" \
            -backend-config="container_name=$TF_BACKEND_CONTAINER" \
            -backend-config="key=$TF_BACKEND_KEY"

          terraform apply -auto-approve
